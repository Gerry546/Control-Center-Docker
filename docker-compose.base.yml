version: "3.9"
########################################################################
########################### NETWORKS ###################################
########################################################################
networks:
  home_internal:
    name: home_internal
    driver: bridge
    ipam:
      config:
        - subnet: 192.168.89.0/24
  socket_proxy:
    name: socket_proxy
    driver: bridge
    ipam:
      config:
        - subnet: 192.168.91.0/24
  dockervlan:
    name: dockervlan
    driver: macvlan
    driver_opts:
      parent: enp3s0 # using ifconfig
    ipam:
      config:
        - subnet: "192.168.1.0/24"
          ip_range: "192.168.1.199/32"
          gateway: "192.168.1.1"

########################################################################
########################### Secrets ####################################
########################################################################
secrets:
  cloudflare_api_token:
    file: $DOCKERDIR/secrets/cloudflare_api_token
  cloudflare_api_key:
    file: $DOCKERDIR/secrets/cloudflare_api_key
  cloudflare_email:
    file: $DOCKERDIR/secrets/cloudflare_email
  mysql_root_password:
    file: $DOCKERDIR/secrets/mysql_root_password
  traefik_forward_auth:
    file: $DOCKERDIR/secrets/traefik_forward_auth

########################################################################
########################### Extensions #################################
########################################################################
x-environment:
  &default-tz-puid-pgid
  TZ: $TZ
  PUID: $PUID
  PGID: $PGID

# Keys common to some of the services in basic-services.txt
x-common-keys-core:
  &common-keys-core
  networks:
    - home_internal
  security_opt:
    - no-new-privileges:true
  restart: always

# Keys common to some of the dependent services/apps
x-common-keys-apps:
  &common-keys-apps
  networks:
    - home_internal
  security_opt:
    - no-new-privileges:true
  restart: unless-stopped

########################################################################
########################### SERVICES ###################################
########################################################################
services:
  ########################################################################
  # Adguard
  ########################################################################
  # adguardhome:
  #   <<: *common-keys-core # See EXTENSION FIELDS at the top
  #   container_name: adguardhome
  #   image: adguard/adguardhome
  #   networks:
  #     dockervlan:
  #       ipv4_address: 192.168.1.199 # IP address inside defined range
  #     home_internal:
  #   ports:
  #     - 53/udp
  #     - 67/udp
  #     - 68/tcp
  #     - 68/udp
  #     - 8080/tcp
  #     # - 443/tcp
  #     - 853/tcp
  #     - 3000/tcp
  #   volumes:
  #     - $DOCKERDIR/appdata/adguard/conf:/opt/adguardhome/conf
  #     - $DOCKERDIR/appdata/adguard/work:/opt/adguardhome/work
  #     - $DOCKERDIR/shared/certs/$DOMAINNAME_HOME_SYNOLOGY:/certs
  #   labels:
  #     - "traefik.enable=true"
  #     ## HTTP Routers
  #     - "traefik.http.routers.adguard-rtr.entrypoints=https"
  #     - "traefik.http.routers.adguard-rtr.rule=Host(`adguard.$DOMAINNAME_CLOUD_SERVER`)"
  #     ## Middlewares
  #     - "traefik.http.routers.adguard-rtr.middlewares=chain-oauth@file"
  #     ## HTTP Services
  #     - "traefik.http.routers.adguard-rtr.service=adguard-svc"
  #     - "traefik.http.services.adguard-svc.loadbalancer.server.port=8080"

  ########################################################################
  # Portainer - WebUI for Containers
  ########################################################################
  portainer:
    <<: *common-keys-core # See EXTENSION FIELDS at the top
    container_name: portainer
    image: portainer/portainer-ce:latest
    command: -H tcp://socket-proxy:2375
    volumes:
      - $DOCKERDIR/appdata/portainer/data:/data
    environment:
      - TZ=$TZ
    ports:
      - "9000:9000"
    networks:
      home_internal:
      socket_proxy:
    depends_on:
      - socket-proxy
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.portainer-rtr.entrypoints=https"
      - "traefik.http.routers.portainer-rtr.rule=Host(`portainer.$DOMAINNAME_CLOUD_SERVER`)"
      - "traefik.http.routers.portainer-rtr.tls=true"
      ## Middlewares
      # - "traefik.http.routers.portainer-rtr.middlewares=chain-basic-auth@file"
      - "traefik.http.routers.portainer-rtr.middlewares=chain-no-auth@file"
      ## HTTP Services
      - "traefik.http.routers.portainer-rtr.service=portainer-svc"
      - "traefik.http.services.portainer-svc.loadbalancer.server.port=9000"

  ########################################################################
  # Cloudflare DDNS - Updater for cloudflare DDNS
  ########################################################################
  cf-ddns:
    <<: *common-keys-core # See EXTENSION FIELDS at the top
    container_name: cf-ddns
    image: oznu/cloudflare-ddns:latest
    secrets:
      - cloudflare_api_token
    environment:
      - API_KEY_FILE=/run/secrets/cloudflare_api_token
      - ZONE=$DOMAINNAME_CLOUD_SERVER
      - PROXIED=true
      - RRTYPE=A
      - DELETE_ON_STOP=false
      - DNS_SERVER=1.1.1.1

  ########################################################################
  # DockerGC - Automatic cleanup of images and containers
  ########################################################################
  dockergc:
    <<: *common-keys-apps # See EXTENSION FIELDS at the top
    container_name: dockergc
    image: clockworksoul/docker-gc-cron:latest
    networks:
      socket_proxy:
    volumes:
      - $DOCKERDIR/appdata/docker-gc/docker-gc-exclude:/etc/docker-gc-exclude # Create empty file
    environment:
      DOCKER_HOST: tcp://socket-proxy:2375
      CRON: 0 0 0 * * ? # Everyday at midnight. Previously 0 0 * * *
      FORCE_IMAGE_REMOVAL: 1
      FORCE_CONTAINER_REMOVAL: 0
      GRACE_PERIOD_SECONDS: 604800
      DRY_RUN: 0
      CLEAN_UP_VOLUMES: 1
      TZ: $TZ

  ########################################################################
  # Heimdall - Container dashboard
  ########################################################################
  heimdall:
    <<: *common-keys-core # See EXTENSION FIELDS at the top
    container_name: heimdall
    image: lscr.io/linuxserver/heimdall:latest
    networks:
      home_internal:
      socket_proxy:
    volumes:
      - $DOCKERDIR/appdata/heimdall:/config
    environment:
      <<: *default-tz-puid-pgid
      DOCKER_HOST: tcp://socket-proxy:2375
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.heimdall-rtr.entrypoints=https"
      - "traefik.http.routers.heimdall-rtr.rule=Host(`$DOMAINNAME_CLOUD_SERVER`,`www.$DOMAINNAME_CLOUD_SERVER`)"
      - "traefik.http.routers.heimdall-rtr.tls=true"
      ## Middlewares
      - "traefik.http.routers.heimdall-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.heimdall-rtr.service=heimdall-svc"
      - "traefik.http.services.heimdall-svc.loadbalancer.server.port=80"

  ########################################################################
  # Traefik - Reverse proxy
  ########################################################################
  traefik:
    <<: *common-keys-core # See EXTENSION FIELDS at the top
    container_name: traefik
    image: traefik
    command:
      # CLI arguments
      - --global.checkNewVersion=true
      - --global.sendAnonymousUsage=true
      - --entryPoints.http.address=:80
      - --entryPoints.https.address=:443
      # Allow these IPs to set the X-Forwarded-* headers - Cloudflare IPs: https://www.cloudflare.com/ips/
      - --entrypoints.https.forwardedHeaders.trustedIPs=$CLOUDFLARE_IPS,$LOCAL_IPS
      - --entryPoints.traefik.address=:8080
      - --api=true
      # - --api.insecure=true
      - --api.dashboard=true
      # - --serversTransport.insecureSkipVerify=true
      - --log=true
      - --log.filePath=/logs/traefik.log
      - --log.level=INFO # (Default: error) DEBUG, INFO, WARN, ERROR, FATAL, PANIC
      - --accessLog=true
      - --accessLog.filePath=/logs/access.log
      - --accessLog.bufferingSize=100 # Configuring a buffer of 100 lines
      - --accessLog.filters.statusCodes=204-299,400-499,500-599
      - --providers.docker=true
      # - --providers.docker.endpoint=unix:///var/run/docker.sock # Use Docker Socket Proxy instead for improved security
      - --providers.docker.endpoint=tcp://socket-proxy:2375
      - --providers.docker.exposedByDefault=false
      - --entrypoints.https.http.tls.options=tls-opts@file
      # Add dns-cloudflare as default certresolver for all services. Also enables TLS and no need to specify on individual services
      - --entrypoints.https.http.tls.certresolver=dns-cloudflare
      - --entrypoints.https.http.tls.domains[0].main=$DOMAINNAME_CLOUD_SERVER
      - --entrypoints.https.http.tls.domains[0].sans=*.$DOMAINNAME_CLOUD_SERVER
      # - --entrypoints.https.http.tls.domains[1].main=$DOMAINNAME2 # Pulls main cert for second domain
      # - --entrypoints.https.http.tls.domains[1].sans=*.$DOMAINNAME2 # Pulls wildcard cert for second domain
      - --providers.docker.network=home_internal
      - --providers.docker.swarmMode=false
      - --providers.file.directory=/rules # Load dynamic configuration from one or more .toml or .yml files in a directory
      # - --providers.file.filename=/path/to/file # Load dynamic configuration from a file
      - --providers.file.watch=true # Only works on top level files in the rules folder
      # - --certificatesResolvers.dns-cloudflare.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory # LetsEncrypt Staging Server - uncomment when testing
      - --certificatesResolvers.dns-cloudflare.acme.email=$CLOUDFLARE_EMAIL
      - --certificatesResolvers.dns-cloudflare.acme.storage=/acme.json
      - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.provider=cloudflare
      - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.resolvers=1.1.1.1:53,1.0.0.1:53
      - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.delayBeforeCheck=90 # To delay DNS check and reduce LE hitrate
    networks:
      home_internal:
        ipv4_address: 192.168.89.254 # You can specify a static IP
      socket_proxy:
        # extra_hosts:
        #   - host.docker.internal:172.17.0.1
    ports:
      - target: 80
        published: 80
        protocol: tcp
        mode: host
      - target: 443
        published: 443
        protocol: tcp
        mode: host
    volumes:
      - $DOCKERDIR/appdata/traefik2/rules/cloudserver:/rules # file provider directory
      # - /var/run/docker.sock:/var/run/docker.sock:ro # If you use Docker Socket Proxy, comment this line out
      - $DOCKERDIR/appdata/traefik2/acme/acme.json:/acme.json # cert location - you must create this empty file and change permissions to 600
      - $DOCKERDIR/logs/cloudserver/traefik:/logs # for fail2ban or crowdsec
      - $DOCKERDIR/shared:/shared
    secrets:
      - cloudflare_api_key
      - cloudflare_email
    environment:
      - TZ=$TZ
      - CF_API_EMAIL_FILE=/run/secrets/cloudflare_email
      - CF_API_KEY_FILE=/run/secrets/cloudflare_api_key
      - DOMAINNAME_CLOUD_SERVER # Passing the domain name to the traefik container to be able to use the variable in rules.
    labels:
      - "traefik.enable=true"
      # HTTP-to-HTTPS Redirect
      - "traefik.http.routers.http-catchall.entrypoints=http"
      - "traefik.http.routers.http-catchall.rule=HostRegexp(`{host:.+}`)"
      - "traefik.http.routers.http-catchall.middlewares=redirect-to-https"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
      # HTTP Routers
      - "traefik.http.routers.traefik-rtr.entrypoints=https"
      - "traefik.http.routers.traefik-rtr.rule=Host(`traefik.$DOMAINNAME_CLOUD_SERVER`)"
      - "traefik.http.routers.traefik-rtr.tls=true" # Some people had 404s without this
      # - "traefik.http.routers.traefik-rtr.tls.certresolver=dns-cloudflare" # Comment out this line after first run of traefik to force the use of wildcard certs
      - "traefik.http.routers.traefik-rtr.tls.domains[0].main=$DOMAINNAME_CLOUD_SERVER"
      - "traefik.http.routers.traefik-rtr.tls.domains[0].sans=*.$DOMAINNAME_CLOUD_SERVER"
      # - "traefik.http.routers.traefik-rtr.tls.domains[1].main=$DOMAINNAME2" # Pulls main cert for second domain
      # - "traefik.http.routers.traefik-rtr.tls.domains[1].sans=*.$DOMAINNAME2" # Pulls wildcard cert for second domain
      ## Services - API
      - "traefik.http.routers.traefik-rtr.service=api@internal"
      ## Middlewares
      # - "traefik.http.routers.traefik-rtr.middlewares=chain-basic-auth@file"
      - "traefik.http.routers.traefik-rtr.middlewares=chain-oauth@file"

  ########################################################################
  # Watchtower - Automatic container updater
  ########################################################################
  watchtower:
    <<: *common-keys-core # See EXTENSION FIELDS at the top
    container_name: watchtower
    image: containrrr/watchtower:latest
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      TZ: $TZ
      WATCHTOWER_CLEANUP: "true"
      WATCHTOWER_REMOVE_VOLUMES: "true"
      WATCHTOWER_INCLUDE_STOPPED: "true"
      WATCHTOWER_NO_STARTUP_MESSAGE: "false"
      WATCHTOWER_SCHEDULE: "0 30 12 * * *" # Everyday at 12:30
      # DOCKER_HOST: tcp://home_internal:2375 # Use this if you have Socket Proxy enabled.
      DOCKER_API_VERSION: "1.40"
